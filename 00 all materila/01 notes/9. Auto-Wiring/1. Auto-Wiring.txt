An object A depends on object B to do its job, then B is the dependency and A is the dependent object. 
So far, you have learnt how to do dependency injection using the setter and constructor injection and link up these two objects using the ref tag. 

As a programmer, you have configured the dependency injection in the config.xml using the ref tag.
This process of linking the dependent and the dependency is called Wiring,
wiring of beans together. 

In realtime applications, you will be wiring a lot of objects or a lot of dependencies together.
This is process is done by the programmer, then it is called bean wiring. 
And if this process is done by the container itself, the Spring container itself, then it is called auto wiring.


So we'll not be writing any ref tag, we will not be using the property tag or the constructor-arg tag,
the container will do it for us. Simply we configure it when we configure our beans to do autowiring.

Autowiring can be done in two different ways 

1. first --->  Using XML. 

1. By default, it is no, it is not autowired   ( setter injection ).
2. We can autowire By-Type, by the datatype, 
3. By-Name of the bean ( use setter injection ) and 
4. also Auto-Detect is an other option which only works in Spring 2.0x and lower. So auto detect is not there, starting Spring 3.0 we'll not be using that.
5. And finally, By-Constructor. 

imp note : 
1. Here by type and by name use the setter injection.
2. By constructor, as the name itself says it uses the constructor injection.


2. second ---> Annotations.
And also we can do autowiring through annotations

1. @Autowired annotation. 
2. @Qualifier annotation. 

In the next few lectures, you'll be using both these ways to autowire.


	
--------------------------------------
	1. Autowiring byType
-------------------------------------


1. <bean class="com.bharath.spring.springcoreadvanced.autowiring.Employee" name="employee" autowire="byType" />
this is byType="" 
so byType and byName is used autowiring in getter and setter 


note : so when we run our test class then spring container loads this xml configuration file 
 	and then it will create this address bean and when it comes to the employee bean since we have configure by-type it will go to the 
	employee class.
	it will search what all reference dependencies or what all object dependencies does employee have. It will
	find address and it will look at what it's type is or what class type it is. It is address.
	It will then take this address, goes to the config file and searches which bean tag has a class as address. 
It keeps on searching,
and as soon as it finds it, it's going to use that particular bean. It will instantiate that bean if
it is not already instantiated and then it will inject that bean into the employee using setter injection.






Three important things that you should always remember when you do autowiring by type.

1. Spring container will try to find a match by type and if the bean is there, it will inject it.
2. if it is not find then it will inject a null value to the refrence type.
3. if it find two same bean with different name then it will through an exception. ----> expected single matching bean but found 2.





-----------------------------------------
	2. Autowiring by name
-----------------------------------------


byName works by the name of the object or name of the reference variable that we have defined here. In this case it is address. 
 <bean class="com.bharath.spring.springcoreadvanced.autowiring.Employee"  name="employee" autowire="byName"/>



Three important things that you should always remember when you do autowiring by type.

1. Spring container will try to find a match by Name and if the bean is there, it will inject it.
2. if it is not find then it will inject a null value to the refrence type.
3. if it find two same bean with same name then it will through an exception. ----> It says Configuration problem: Bean name 'address' is already used in 															this element.

-----------------------------------------
	3. Constructor Autowiring
-----------------------------------------

<bean class="com.bharath.spring.springcoreadvanced.autowiring.Employee" 
		name="employee" autowire="constructor"/>






--------  type 2 :   Autowiring using annotations   --------------

  1.  @autowired 


1. @autowired in setter method

a. use @autowired in setter method
	@Autowired
	public void setAddress(Address address) {
		this.address = address;
	}
b. enable all annotation to use
   <context:annotation-config />

c. now simple use beam without autowire="" as attribute



2. The autowired annotation can be used at the property level as well or the field level
Instead of doing it at a setter level, you can grab this autowired from here, cut it and paste it on
the field level and Spring will automatically inject the dependency into this field.
example : 
	@Autowired
	private Address address;


3. The third combination is to use it at the constructor level.
	
	@Autowired
	Employee(Address address){
		this.address = address;
	}




2. In this lecture, you will learn and use the Qualifier annotation along with the Autowired annotation.

 The Qualifier annotation tells the container that it should find a bean with the given name and then inject that bean.
example : @Qualifier("address123")

note : If the container find a bean with that name in the configuration, it will throw a NoSuchBeanException.

used in property but not used constructor in bean class
ex:
	@Autowired(required=false)
	@Qualifier("address123")
	private Address address;


note : 
this bean doesn't even exist, a bean with this name doesn't even exist. it says we are seeing a NoSuchBeanDefinitionException. 
To resolve this @Autowired(required=false) so it add null instead of throw exception . 	 
